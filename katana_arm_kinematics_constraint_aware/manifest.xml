<package>
  <description brief="katana_arm_kinematics_constraint_aware">

      <p>
	  This node provides the
	  <a href="/doc/api/kinematics_msgs/html/srv/GetConstraintAwarePositionIK.html">get_constraint_aware_ik</a>
	  service. It just strips away all the constraint aware stuff and calls a normal (non-constraint aware)
	  <a href="/doc/api/kinematics_msgs/html/srv/GetPositionIK.html">get_ik</a> service instead.
      </p>

      <p>
	  Normally, get_constraint_aware_ik checks the space of potential IK solutions (from get_ik) for a
	  solution that obeys all constraints (i.e., a solution that is not in self-collision or in collision
	  with the environment). That only really makes sense for a redundant (>6 DoF) robot arm. Since the
	  Katana only has 5 DoF, we only get at most one IK solution, so there is nothing to filter.
      </p>

      <p>
	  If we return a solution that violates constraints - for instance, that is in self-collision - then
	  move_arm will abort with an error code.  But if the solution is valid, everything should work.
      </p>

  </description>
  <author>Martin GÃ¼nther</author>
  <license>BSD</license>
  <review status="unreviewed" notes=""/>
  <url>http://ros.org/wiki/katana_arm_kinematics_constraint_aware</url>
  <depend package="kinematics_msgs"/>
  <depend package="roscpp"/>

</package>
