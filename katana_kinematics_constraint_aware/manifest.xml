<package>

  <description brief="A kinematics plugin for the Katana 450 arm based on OpenRave IK and urdf-based FK">

    <p>
      This package provides an plugin implementation of the kinematics_base interface to establish constraint aware kinematics services.
      The plugin combines the OpenRave IK service from the orroplanning package and the generic urdf-based FK from the arm_kinematics package. To provide constraint_aware services the plugin must be used with the arm_kinematics_constraint_aware node of the respective package.
    </p>

    <p>
      Additionally, the non_constraint_aware_ik_adapter node provides the
      <a href="/doc/api/kinematics_msgs/html/srv/GetConstraintAwarePositionIK.html">get_constraint_aware_ik</a>
      service. It just strips away all the constraint aware stuff and calls a normal (non-constraint aware)
      <a href="/doc/api/kinematics_msgs/html/srv/GetPositionIK.html">get_ik</a> service instead.
    </p>

    <p>
      Normally, get_constraint_aware_ik checks the space of potential IK solutions (from get_ik) for a
      solution that obeys all constraints (i.e., a solution that is not in self-collision or in collision
      with the environment). That only really makes sense for a redundant (>6 DoF) robot arm. Since the
      Katana only has 5 DoF, we only get at most one IK solution, so there is nothing to filter.
    </p>

    <p>
      If we return a solution that violates constraints - for instance, that is in self-collision - then
      move_arm will abort with an error code.  But if the solution is valid, everything should work.
    </p>

  </description>

  <author>Henning Deeken, Martin GÃ¼nther</author>
  <license>GPL</license>
  <review status="unreviewed" notes=""/>
  <url>http://ros.org/wiki/katana_kinematics_constraint_aware</url>

  <depend package="roscpp"/>
  <depend package="rospy"/>
  <depend package="orrosplanning"/>
  <depend package="kinematics_msgs"/>
  <depend package="urdf"/>
  <depend package="pluginlib"/>
  <depend package="kinematics_base"/>
  <depend package="arm_kinematics_constraint_aware"/>
  <depend package="ompl"/>

  <export>
    <cpp cflags="-I${prefix}/include" lflags="-Wl,-rpath,${prefix}/lib -L${prefix}/lib -lkatana_openrave_kinematics"/>
    <kinematics_base plugin="${prefix}/katana_openrave_kinematics.xml" />
  </export>

</package>


